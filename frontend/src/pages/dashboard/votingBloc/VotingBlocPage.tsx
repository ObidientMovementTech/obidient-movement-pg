import { useEffect, useState } from "react";
import { Plus, Search, Filter, ChevronLeft, ChevronRight, Users, Play, ExternalLink, ShieldCheck } from "lucide-react";
import VotingBlocList from "./VotingBlocList";
import Loading from "../../../components/Loader";
import Toast from "../../../components/Toast";
import { getOwnedVotingBlocs } from "../../../services/votingBlocService";
import { useNavigate } from "react-router";
import { VotingBloc } from "../../../types/votingBloc";
import { useUserContext } from "../../../context/UserContext";

export default function VotingBlocPage() {
  const { profile } = useUserContext();
  const [votingBlocs, setVotingBlocs] = useState<VotingBloc[]>([]);
  const [loading, setLoading] = useState(true);
  const [toast, setToast] = useState<{ message: string; type: "success" | "error" } | null>(null);
  const [refresh] = useState(false);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(1);
  const perPage = 6;
  const navigate = useNavigate();

  useEffect(() => {
    setLoading(true);
    getOwnedVotingBlocs()
      .then((data) => {
        setVotingBlocs(data.votingBlocs || []);
      })
      .catch(() => setToast({ message: "Failed to load voting blocs", type: "error" }))
      .finally(() => setLoading(false));
  }, [refresh]);

  const filtered = votingBlocs.filter((bloc) =>
    bloc.name.toLowerCase().includes(search.toLowerCase()) ||
    bloc.targetCandidate.toLowerCase().includes(search.toLowerCase()) ||
    bloc.description.toLowerCase().includes(search.toLowerCase())
  );

  const totalPages = Math.ceil(filtered.length / perPage);
  const paginatedBlocs = filtered.slice((page - 1) * perPage, page * perPage);

  const handleVotingBlocClick = (id: string) => {
    navigate(`/dashboard/manage-voting-bloc/${id}`);
  };

  const handleCreateVotingBloc = () => {
    // Check if user has any auto-generated voting blocs (every user should have one)
    const hasAutoBloc = votingBlocs.some(bloc => bloc.isAutoGenerated);

    if (!hasAutoBloc) {
      // If no auto bloc exists, allow creation
      navigate('/dashboard/new-voting-bloc');
      return;
    }

    // For additional voting blocs, check KYC status
    if (profile?.kycStatus !== 'approved') {
      setToast({
        message: "🛡️ Complete KYC verification to create additional voting blocs. Click here to start verification.",
        type: "error"
      });
      setTimeout(() => navigate('/dashboard/kyc'), 2000);
      return;
    }

    navigate('/dashboard/new-voting-bloc');
  };

  // Helper function to determine if verification is required
  const isVerificationRequired = () => {
    const hasAutoBloc = votingBlocs.some(bloc => bloc.isAutoGenerated);
    return hasAutoBloc && profile?.kycStatus !== 'approved';
  };

  if (loading) return <Loading />;

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
              <Users className="text-green-600" size={32} />
              My Voting Blocs
            </h1>
            <p className="text-gray-600 mt-2">
              Build your coalition and lead your group to victory
            </p>
          </div>

          <div className="flex items-center gap-3">
            <div className="flex flex-col md:flex-row-reverse items-end gap-2">

              <button
                onClick={handleCreateVotingBloc}
                disabled={isVerificationRequired()}
                className={`flex items-center gap-2 px-4 py-2 text-white rounded-lg transition-colors ${isVerificationRequired()
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-green-600 hover:bg-green-700'
                  }`}
              >
                <Plus size={20} />
                Create New Voting Bloc
              </button>
              {isVerificationRequired() && (
                <div className="flex items-center gap-1 px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full border border-orange-200">
                  <ShieldCheck size={12} />
                  KYC Verification Needed
                </div>
              )}


            </div>
          </div>
        </div>
      </div>

      {/* Informational Section with YouTube CTA */}
      <div className="mb-8 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 rounded-xl border border-blue-100 overflow-hidden">
        <div className="p-6">
          <div className="flex flex-col lg:flex-row items-start lg:items-center gap-6">
            {/* Content */}
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-3">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                  <Users className="text-blue-600" size={24} />
                </div>
                <h3 className="text-xl font-semibold text-gray-900">
                  Get to Understand a Voting Bloc
                </h3>
              </div>

              <p className="text-gray-700 mb-4 leading-relaxed">
                A Voting Bloc is a powerful coalition of like-minded citizens who unite behind specific candidates and causes.
                Learn how to build, manage, and mobilize your political community effectively to create real change in your constituency.
              </p>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>Build strategic coalitions</span>
                </div>
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span>Coordinate voter mobilization</span>
                </div>
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  <span>Amplify collective voice</span>
                </div>
              </div>
            </div>

            {/* CTA Button */}
            <div className="flex-shrink-0">
              <a
                href="https://drive.google.com/file/d/1cosd4uwEnR0XYpgGwzEbMQPk9t7M5Fr7/view?usp=drive_link" // Replace with actual YouTube link
                target="_blank"
                rel="noopener noreferrer"
                className="group inline-flex items-center gap-3 bg-red-600 hover:bg-red-700 text-white px-6 py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
              >
                <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center group-hover:bg-white/30 transition-colors">
                  <Play className="text-white" size={20} />
                </div>
                <div className="text-left">
                  <div className="text-sm font-medium">Watch Tutorial</div>
                  <div className="text-xs opacity-90 flex items-center gap-1">
                    Learn more <ExternalLink size={12} />
                  </div>
                </div>
              </a>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="mb-6 flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
          <input
            type="text"
            placeholder="Search voting blocs..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
          />
        </div>
        <button className="flex items-center gap-2 px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
          <Filter size={20} />
          Filter
        </button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8">
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <div className="text-2xl font-bold text-gray-900">{votingBlocs.length}</div>
          <div className="text-sm text-gray-600">Total Voting Blocs</div>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <div className="text-2xl font-bold text-green-600">
            {votingBlocs.reduce((sum, bloc) => sum + bloc.metrics.totalMembers, 0)}
          </div>
          <div className="text-sm text-gray-600">Total Members</div>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <div className="text-2xl font-bold text-blue-600">
            {votingBlocs.filter(bloc => bloc.status === 'active').length}
          </div>
          <div className="text-sm text-gray-600">Active Blocs</div>
        </div>
      </div>

      {/* Voting Bloc List */}
      <VotingBlocList
        votingBlocs={paginatedBlocs}
        onVotingBlocClick={handleVotingBlocClick}
      />

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="mt-8 flex items-center justify-between">
          <div className="text-sm text-gray-600">
            Showing {Math.min((page - 1) * perPage + 1, filtered.length)} to{" "}
            {Math.min(page * perPage, filtered.length)} of {filtered.length} voting blocs
          </div>

          <div className="flex items-center gap-2">
            <button
              onClick={() => setPage(Math.max(1, page - 1))}
              disabled={page === 1}
              className="flex items-center gap-1 px-3 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft size={16} />
              Previous
            </button>

            <div className="flex items-center gap-1">
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                const pageNum = i + 1;
                return (
                  <button
                    key={pageNum}
                    onClick={() => setPage(pageNum)}
                    className={`px-3 py-2 rounded-lg ${page === pageNum
                      ? "bg-green-600 text-white"
                      : "text-gray-600 hover:bg-gray-50"
                      }`}
                  >
                    {pageNum}
                  </button>
                );
              })}
            </div>

            <button
              onClick={() => setPage(Math.min(totalPages, page + 1))}
              disabled={page === totalPages}
              className="flex items-center gap-1 px-3 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Next
              <ChevronRight size={16} />
            </button>
          </div>
        </div>
      )}

      {/* Toast */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
}

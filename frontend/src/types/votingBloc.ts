export interface VotingBloc {
  _id: string;
  name: string;
  description: string;
  goals: string[];
  targetCandidate: string;
  scope: 'National' | 'State' | 'LG' | 'Ward';
  location: {
    state: string;
    lga: string;
    ward?: string;
  };
  bannerImageUrl?: string;
  richDescription?: string;
  joinCode: string;
  isAutoGenerated?: boolean;
  creator: {
    _id: string;
    name: string;
    email: string;
    profileImage?: string;
    personalInfo: {
      user_name: string;
    };
  };
  toolkits: {
    label: string;
    url: string;
    type: 'Toolkit' | 'Policy';
  }[];
  members: {
    _id: string;
    name: string;
    personalInfo: {
      user_name: string;
      currentLocation?: {
        state: string;
        lga: string;
        ward?: string;
      };
    };
    email: string;
    metadata?: {
      joinDate: string;
      decisionTag: 'Undecided' | 'Not-interested' | 'Committed' | 'Voted';
      contactTag: 'No Response' | 'Messaged recently' | 'Called recently' | 'Not Reachable';
      engagementLevel: 'Low' | 'Medium' | 'High';
      notes: string;
      lastContactDate?: string;
      location?: {
        state?: string;
        lga?: string;
        ward?: string;
      };
    };
  }[];
  invitations: {
    invitedBy: string;
    invitedUser: string;
    status: 'pending' | 'accepted' | 'declined';
    inviteType: 'whatsapp' | 'sms' | 'link';
    inviteDate: string;
  }[];
  metrics: {
    totalMembers: number;
    weeklyGrowth: number;
    monthlyGrowth: number;
    engagementScore: number;
    lastUpdated: string;
  };
  status: 'active' | 'inactive' | 'suspended';
  createdAt: string;
  updatedAt: string;
}

export interface CreateVotingBlocData {
  name: string;
  description: string;
  richDescription: string;
  goals: string[];
  targetCandidate: string;
  scope: 'National' | 'State' | 'LG' | 'Ward';
  location: {
    state: string;
    lga: string;
    ward?: string;
  };
  bannerImageUrl: string;
  toolkits?: {
    label: string;
    url: string;
    type: 'Toolkit' | 'Policy';
  }[];
}

export interface LeaderboardEntry {
  _id: string;
  name: string;
  creator: {
    _id: string;
    name: string;
    personalInfo: {
      user_name: string;
    };
  };
  metrics: {
    totalMembers: number;
    engagementScore: number;
  };
  location: {
    state: string;
    lga: string;
    ward?: string;
  };
  scope: string;
}

export interface VotingBlocInvitation {
  _id: string;
  invitedBy: {
    _id: string;
    name: string;
    email: string;
  };
  invitedUser?: {
    _id: string;
    name: string;
    email: string;
  };
  invitedEmail?: string; // For non-existing users invited by email
  email?: string; // Legacy field support
  phone?: string;
  status: 'pending' | 'accepted' | 'declined';
  inviteType: 'email' | 'whatsapp' | 'sms' | 'link';
  message?: string;
  inviteDate: string;
  responseDate?: string;
  respondedAt?: string;
  votingBloc: string;
}

export interface MemberEngagement {
  overview: {
    totalInvitations: number;
    acceptedInvitations: number;
    pendingInvitations: number;
    declinedInvitations: number;
    memberRetention: number;
    averageEngagement: number;
  };
  memberActivity: {
    memberId: string;
    name: string;
    email: string;
    joinedAt: string;
    lastActive: string;
    engagementScore: number;
    activityLevel: 'high' | 'medium' | 'low';
    interactions: number;
  }[];
  growthTrends: {
    period: string;
    newMembers: number;
    leftMembers: number;
    netGrowth: number;
  }[];
  communicationStats: {
    totalMessages: number;
    broadcastsSent: number;
    responseRate: number;
    preferredChannels: {
      email: number;
      whatsapp: number;
      sms: number;
      inApp: number;
    };
  };
}

// Interface for the actual backend analytics response
export interface VotingBlocAnalytics {
  totalMembers: number;
  recentMembers: number;
  pendingInvitations: number;
  acceptedInvitations: number;
  declinedInvitations: number;
  conversionRate: string;
  growthRate: number;
}

export interface InviteMemberForm {
  email: string;
  phone: string;
  inviteType: 'email' | 'whatsapp' | 'sms';
  message: string;
}

export interface BroadcastMessageForm {
  message: string;
  messageType: 'announcement' | 'update' | 'reminder';
  channels: ('email' | 'whatsapp' | 'sms' | 'in-app')[];
}
